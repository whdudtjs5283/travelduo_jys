/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.39
 * Generated at: 2019-04-04 11:54:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.matchinfo;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import member.model.vo.Member;
import matchinfo.model.vo.MatchInfo;
import member.model.vo.Member;
import java.util.ArrayList;

public final class matchList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("matchinfo.model.vo.MatchInfo");
    _jspx_imports_classes.add("member.model.vo.Member");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write(' ');
      out.write('\r');
      out.write('\n');

   ArrayList <MatchInfo> list = (ArrayList<MatchInfo>)request.getAttribute("list");
   /* Member loginUser = (Member) session.getAttribute("loginUser"); */
   String result = (String)request.getAttribute("result");
   String user = (String)request.getAttribute("user");

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<meta name=\"google\" value=\"notranslate\">\r\n");
      out.write("<title>여행가듀오</title>\r\n");
      out.write("\r\n");
      out.write("<!--scripts loaded here -->\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"./resource/css/animate.min.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" href=\"./resource/css/ionicons.min.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" href=\"./resource/css/styles.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" href=\"./resource/css/style1.css\" />\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("p {\r\n");
      out.write(" overflow: hidden; \r\n");
      out.write("  text-overflow: ellipsis;\r\n");
      out.write("  white-space: nowrap; \r\n");
      out.write("  width: 100px;\r\n");
      out.write("  height: 20px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("   <div id=\"aboutModal3\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\"\r\n");
      out.write("      aria-hidden=\"true\">\r\n");
      out.write("      <div class=\"modal-dialog\">\r\n");
      out.write("         <div class=\"modal-content\">\r\n");
      out.write("            <div class=\"modal-body\">\r\n");
      out.write("            <a href=\"/travelduo/index2.jsp\"><button>홈 화면으로 돌아가기</button></a>\r\n");
      out.write("               <h2 align=\"center\" class=\"text-center\">내 여행정보 리스트</h2>\r\n");
      out.write("                  <!-- 등록한 테이블 제작 장소 -->\r\n");
      out.write("\r\n");
      out.write("                     <table style=\"margin-left: auto; margin-right: auto;\">\r\n");
      out.write("                     <thead class=\"text-center\">\r\n");
      out.write("                     <tr class=\"text-center\">\r\n");
      out.write("                     <th width=\"100\" class=\"text-center\">등록 번호</th>\r\n");
      out.write("                     <th width=\"100\" class=\"text-center\">여행 지역</th>\r\n");
      out.write("                     <th width=\"100\" class=\"text-center\">여행 도시</th>\r\n");
      out.write("                     <th width=\"100\" class=\"text-center\">여행 년도</th>\r\n");
      out.write("                     <th width=\"100\" class=\"text-center\">여행 월</th>\r\n");
      out.write("                     <th width=\"100\" class=\"text-center\">사진</th>\r\n");
      out.write("                     <th width=\"300\" class=\"text-center\">여행 계획</th>\r\n");
      out.write("                     <th height=\"120\" class=\"text-center\">삭제</th>\r\n");
      out.write("                     </tr>\r\n");
      out.write("                     </thead>\r\n");
      out.write("   ");
    for(MatchInfo matchInfo : list){
      out.write("\r\n");
      out.write("<tbody>\r\n");
      out.write("<tr>\r\n");
      out.write("   <td align=\"center\">   ");
      out.print( matchInfo.getMatchNum() );
      out.write("</td>\r\n");
      out.write("   <td align=\"center\">\r\n");
      out.write("   ");
 
   switch (matchInfo.getMatchArea()){
   case "a" : out.print("아시아");
      break;
   case "b" : out.print("홍콩/중국");
      break;
   case "c" : out.print("일본");
      break;
   case "d" : out.print("남태평양");
      break;
   case "e" : out.print("유럽");
      break;
   case "f" : out.print("미주/캐나다");
      break;
   }
   
      out.write("\r\n");
      out.write("   </td>\r\n");
      out.write("   <td align=\"center\">");
      out.print( matchInfo.getMatchCity() );
      out.write("</td>\r\n");
      out.write("   <td align=\"center\">");
      out.print( matchInfo.getMatchYear() );
      out.write("년</td>\r\n");
      out.write("   <td align=\"center\">\r\n");
      out.write("   ");

   switch(matchInfo.getMatchMonth()){
   case "jan" : out.print("1월");
   break;
   case "feb" : out.print("2월");
   break;
   case "mar" : out.print("3월");
   break;
   case "apr" : out.print("4월");
   break;
   case "may" : out.print("5월");
   break;
   case "jun" : out.print("6월");
   break;
   case "jul" : out.print("7월");
   break;
   case "aug" : out.print("8월");
   break;
   case "sep" : out.print("9월");
   break;
   case "oct" : out.print("10월");
   break;
   case "nov" : out.print("11월");
   break;
   case "dec" : out.print("12월");
   break;
   }
   
      out.write("\r\n");
      out.write("   </td>\r\n");
      out.write("      \t\t\t\t<td align=\"center\" class=\"page-scroll\" data-toggle=\"modal\"\r\n");
      out.write("\t\t\t\t\t\t\t\theight=\"50\">\r\n");
      out.write("\t\t\t\t\t\t\t\t");

									if (matchInfo.getMatchPhoto() != null) { //첨부파일이 있다면
								
      out.write(' ');
      out.write('◎');
      out.write(' ');

									} else { //첨부파일이 없다면
								
      out.write(" &nbsp; ");

 	}
 
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t</td>\r\n");
      out.write("   <td align=\"center\"><p>");
      out.print( matchInfo.getMatchPlan() );
      out.write("</p></td>\r\n");
      out.write("   <td align=\"center\"><button onclick=\"deleteMatch();\">삭제하기</button></td>\r\n");
      out.write("   <script type=\"text/javascript\">\r\n");
      out.write("   \r\n");
      out.write("function deleteMatch(){\r\n");
      out.write("   location.href = \"/travelduo/mdel?no=");
      out.print( matchInfo.getMatchNum() );
      out.write("&user=");
      out.print( user );
      out.write("\";\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</tr>\r\n");
  } 
      out.write("\r\n");
      out.write("</tbody>\r\n");
      out.write("</table> \r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</div></div>\r\n");
      out.write("   </div> \r\n");
      out.write("   <br><br><br><br><br><br>\r\n");
      out.write(" \r\n");
      out.write("   \r\n");
      out.write("      <script src=\"./resources/js/jquery-3.3.1.min.js\"></script>\r\n");
      out.write("      <script src=\"./resources/js/jquery.min.js\"></script>\r\n");
      out.write("      <script src=\"./resources/js/bootstrap.min.js\"></script>\r\n");
      out.write("      <script src=\"./resources/js/jquery.easing.min.js\"></script>\r\n");
      out.write("      <script src=\"./resources/js/wow.js\"></script>\r\n");
      out.write("      <script src=\"./resources/js/scripts.js\"></script>\r\n");
      out.write("      <script src=\"https://unpkg.com/ionicons@4.5.5/dist/ionicons.js\"></script> \r\n");
      out.write("   \r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
